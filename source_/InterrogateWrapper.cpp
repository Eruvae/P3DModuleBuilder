/*
 * This file was generated by:
 * D:\P3D\1.9GIT\built_x64_buffered\bin\interrogate -fnames -string -refcount -assert -python-native -SD:\P3D\1.9GIT\built_x64_buffered\include/parser-inc -SD:\P3D\1.9GIT\built_x64_buffered\include/ -srcdir . -oc InterrogateWrapper.cpp -od Interrogate.in -module asd -library asd -nomangle -DINTERROGATE -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -D__inline -D_X86_ -DWIN32_VC -DWIN32 -D_WIN32 -DWIN64_VC -DWIN64 -D_WIN64 -D_MSC_VER=1600 -D"__declspec(param)=" -D__cdecl -D_near -D_far -D__near -D__far -D__stdcall .\config_module.h .\ExampleClass.h 
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#define PANDA_LIBRARY_NAME_asd
#include "py_panda.h"
#include "extension.h"
#include "dcast.h"

#include "./ExampleClass.h"
#include "./config_module.h"
#include "configVariableDouble.h"
#include "configVariableInt.h"
#include "configVariableString.h"
#include "notifyCategoryProxy.h"
#include "pandabase.h"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include <Python/Python.h>
#else
  #include "Python.h"
#endif

//********************************************************************
//*** prototypes for .. Global
//********************************************************************
//********************************************************************
//*** prototypes for .. ExampleClass
//********************************************************************
typedef ExampleClass ExampleClass_localtype;
Define_Module_Class(asd, ExampleClass, ExampleClass_localtype, ExampleClass);
static struct Dtool_PyTypedObject *const Dtool_Ptr_ExampleClass = &Dtool_ExampleClass;
static void Dtool_PyModuleClassInit_ExampleClass(PyObject *module);

//********************************************************************
//*** prototypes for .. External Objects
//********************************************************************

//********************************************************************
//*** Functions for .. Global
//********************************************************************
//********************************************************************
//*** Functions for .. ExampleClass
//********************************************************************
/******************************************************************
 * Python type method wrapper for
 * inline int ExampleClass::multiply(int a, int b) const
 *******************************************************************/
static PyObject *Dtool_ExampleClass_multiply_4(PyObject *self, PyObject *args, PyObject *kwds) {
  ExampleClass *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_ExampleClass, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int ExampleClass::multiply(int a, int b) const
  int param1;
  int param2;
  static const char *keyword_list[] = {"a", "b", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "ii:multiply", (char **)keyword_list, &param1, &param2)) {
    int return_value = (*(const ExampleClass*)local_this).multiply((int)param1, (int)param2);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return PyLongOrInt_FromLong(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "multiply(ExampleClass self, int a, int b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_ExampleClass_multiply_4_comment =
  "C++ Interface:\n"
  "multiply(ExampleClass self, int a, int b)\n";
#else
static const char *Dtool_ExampleClass_multiply_4_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * void ExampleClass::print_string(std::string const &str) const
 *******************************************************************/
static PyObject *Dtool_ExampleClass_print_string_5(PyObject *self, PyObject *arg) {
  ExampleClass *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_ExampleClass, (void **)&local_this)) {
    return NULL;
  }
  // 1-void ExampleClass::print_string(std::string const &str) const
  char *param1_str = NULL;
  Py_ssize_t param1_len;
#if PY_MAJOR_VERSION >= 3
  param1_str = PyUnicode_AsUTF8AndSize(arg, &param1_len);
#else
  if (PyString_AsStringAndSize(arg, &param1_str, &param1_len) == -1) {
    param1_str = NULL;
  }
#endif
  if (param1_str != NULL) {
    (*(const ExampleClass*)local_this).print_string(std::string(param1_str, param1_len));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "print_string(ExampleClass self, str str)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_ExampleClass_print_string_5_comment =
  "C++ Interface:\n"
  "print_string(ExampleClass self, str str)\n";
#else
static const char *Dtool_ExampleClass_print_string_5_comment = NULL;
#endif

/******************************************************************
 * Python type method wrapper for
 * ExampleClass::ExampleClass(void)
 * inline ExampleClass::ExampleClass(ExampleClass const &) = default
 *******************************************************************/
static int Dtool_Init_ExampleClass(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-ExampleClass::ExampleClass(void)
      ExampleClass *return_value = new ExampleClass();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_ExampleClass, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "param0");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
        return -1;
      }
      // 1-inline ExampleClass::ExampleClass(ExampleClass const &) = default
      ExampleClass const *arg_this = (ExampleClass *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_ExampleClass, 0, "ExampleClass.ExampleClass", true, true);
      if (arg_this != NULL) {
        ExampleClass *return_value = new ExampleClass(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_ExampleClass, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "ExampleClass() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "ExampleClass()\n"
      "ExampleClass(const ExampleClass param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_ExampleClass(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_ExampleClass) {
    printf("ExampleClass ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  ExampleClass *local_this = (ExampleClass *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_ExampleClass) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_ExampleClass(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_ExampleClass) {
    return from_this;
  }
  return (void *) NULL;
}

//********************************************************************
//*** Py Init Code For .. ExampleClass | ExampleClass
//********************************************************************
static PyMethodDef Dtool_Methods_ExampleClass[] = {
  {"multiply", (PyCFunction) &Dtool_ExampleClass_multiply_4, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_ExampleClass_multiply_4_comment},
  {"print_string", &Dtool_ExampleClass_print_string_5, METH_O, (const char *)Dtool_ExampleClass_print_string_5_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_ExampleClass = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
};

struct Dtool_PyTypedObject Dtool_ExampleClass = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "asd.ExampleClass",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_ExampleClass,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_ExampleClass,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
    0, // tp_doc
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_ExampleClass,
    standard_type_members,
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_ExampleClass,
    PyType_GenericAlloc,
    Dtool_new_ExampleClass,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_ExampleClass,
  Dtool_UpcastInterface_ExampleClass,
  Dtool_DowncastInterface_ExampleClass,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_ExampleClass(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_ExampleClass._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_ExampleClass._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_ExampleClass) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(ExampleClass)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_ExampleClass);
  }
}


//********************************************************************
//*** Module Object Linker ..
//********************************************************************
void Dtool_asd_RegisterTypes() {
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("ExampleClass", Dtool_ExampleClass);
#endif
}

void Dtool_asd_ResolveExternals() {
#ifndef LINK_ALL_STATIC
  // Resolve externally imported types.
#endif
}

void Dtool_asd_BuildInstants(PyObject *module) {
  (void) module;
  // Module init upcall for ExampleClass
  // ExampleClass
  Dtool_PyModuleClassInit_ExampleClass(module);
  PyModule_AddObject(module, "ExampleClass", (PyObject *)&Dtool_ExampleClass);
//********************************************************************
//*** Module Init Upcall ..  Externally Defined Class
//********************************************************************
}

static PyMethodDef python_simple_funcs[] = {
  // Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference, METH_VARARGS, "Used to borrow 'this' pointer (to, from)\nAssumes no ownership."},
  {"Dtool_AddToDictionary", &Dtool_AddToDictionary, METH_VARARGS, "Used to add items into a tp_dict"},
  {NULL, NULL, 0, NULL}
};

struct LibraryDef asd_moddef = {python_simple_funcs};
static InterrogateModuleDef _in_module_def = {
  1453920895,  /* file_identifier */
  "asd",  /* library_name */
  "Yrwo",  /* library_hash_name */
  "asd",  /* module_name */
  "Interrogate.in",  /* database_filename */
  (InterrogateUniqueNameDef *)0,  /* unique_names */
  0,  /* num_unique_names */
  (void **)0,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  16  /* next_index */
};

Configure(_in_configure_asd);
ConfigureFn(_in_configure_asd) {
  interrogate_request_module(&_in_module_def);
}

